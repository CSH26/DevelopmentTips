@ 표준 네이밍 규칙//////////////////////////////////////////////////////////////////////////////////
1. 클래스/함수/파일명에는 파스칼 표기법 사용.
  -PhoneBook...
  
2. 변수와 함수 파라미터에는 카멜 표기법 사용.
  -phoneBook...
  
3. 인터페이스에는 접두사 "I"가 포함된 파스칼 표기법 사용.
  -ICommand...
  
4. 파일 명은 클래스 명과 같게 사용.
  -클래스 명이 "HelloWorld"라면 파일명은 "HelloWorld.java"...
  
5. 변수에는 되도록 약어 대신 모든 의미를 충분히 담을 것.
  -String address(O) / String addr(X)
  
6. "i, n, s,..."와 같이 한 글자로 된 이름을 사용하지 말 것.
  -루트문에서는 사용 가능
  
7. 키워드와 비슷한 이름을 사용하지 말 것.
  -static, cost...
  
8. 네임스페이스 명은 표준 패턴에 따라 사용.
  -<회사명>, <제품명>, <최상위모듈>, <하위모듈>...
  
@ 특정한 네이밍 규칙//////////////////////////////////////////////////////////////////////////////////
1. get/set은 반드시 속성에 직접 접근할 때 사용.
  -employee.getName();
  
2. compute는 무언가 계산하는 메서드에서 사용.
  -value = computeAverage();
  
3. find는 무언가를 찾는 메서드에서 사용.
  -matrix.findMinElement();
  
4. initialize는 객체 또는 개념을 만들 때 사용.
  
5. GUI 요소를 나타내는 변수는 해당 요소 타입 이름을 접미어로 사용.
  -mainWindow, propertiesDialog, widthScale, loginText, leftScrollbar...
  
6. 접두어 n은 객체 수를 나타내는 변수에 사용.
  -nPorints, nLines...
  
7. 접미어 "No"는  독자적인 번호를 나타내는 변수에 사용.
  -tableNo, employeeNo...
  
8. 반복문 변수는 i,j,k 등으로 호출.
  -간단한 루프에서만 사용하고, j는 i랑 헷갈리지 않게 사용할 것...
  
9. 접두어 is는 Boolean 변수와 메서드에서 사용.
  -isSet, isVisible, isFinished, isFound, isOpen...
  
10. 반의어는 반드시 대응하는 연산에 대해 사용.
  -get/set, add/remove, create/destroy, start/stop, insert/delete...
  
11. 이름에 약어는 피할 것.
  -단 특정 관용구는 약어 형태를 유지해서 사용(CentralProcessingUnit -> cpu)
  
12. 포인터를 이름에 사용하는 것은 피할 것.
  
13. 부정적인 Boolean 변수 이름은 반드시 피할 것.
  -isNoError -> boolean isError;
  
14. 예외 클래스는 Exception 접미어를 붙여 사용.

15. 상수값의 변수이름은 대체로 대문자와 언더바를 사용.
  - final int REQUEST_CODE = 2000;
